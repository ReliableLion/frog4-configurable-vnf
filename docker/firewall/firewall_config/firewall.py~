import json
import netifaces
import iptc
from pprint import pprint

from firewall.firewall_config import constants

from generic_configuration_image.configuration_agent import utils
from generic_configuration_image.configuration_agent.utils import Bash
from generic_configuration_image.configuration_agent.common.interface import Interface
from generic_configuration_image.configuration_agent.firewall_config.vnf_interface import VNF

class Firewall(object):

    yang_module_name = 'config-firewall'
    type = 'fw'

    def __init__(self):

        self.interfaces = []
        self.policies = []

    def json_parse(self, json_file):

        with open(json_file) as json_data:
            data = json.load(json_data)

        self.json_instance = data

        json_interfaces = self.json_instance["config-firewall:interfaces"]["ifEntry"]
        json_policies = self.json_instance["config-firewall:firewall"]["policies"]

        # Save all json interface in a map<interface-name>
        json_interfaces_map = {}
        for json_interface in json_interfaces:
            json_interfaces_map[json_interface['name']] = json_interface

        # Replace for each policy, in-interface and out-interface with the object interface
        for policy in json_policies:
            if ('in-interface' in policy):
                policy['in-interface'] = json_interfaces_map[policy['in-interface']]
            if ('out-interface' in policy):
                policy['out-interface'] = json_interfaces_map[policy['out-interface']]

    def json_print(self):

        json_interfaces = self.json_instance["config-firewall:interfaces"]["ifEntry"]
        json_policies = self.json_instance["config-firewall:firewall"]["policies"]

        print("Interfaces\n")
        for interface in json_interfaces:
            print("name:", interface['name'])
            print("configurationType:", interface['configurationType'])
            print("type:", interface['type'])
            print("\n")
            # pprint(interface)

        print("Policies\n")
        for policy in json_policies:
            if("policy-name" in policy):
                print("policy-name:", policy['policy-name'])
            if("action" in policy):
                print("action:", policy['action'])
            if("in-interface" in policy):
                print("in-interface:", policy['in-interface'])
            if("out-interface" in policy):
                print("out-interface:", policy['out-interface'])
            if("source-address" in policy):
                print("source-address:", policy['source-address'])
            if("source-mask" in policy):
                print("source-mask:", policy['source-mask'])
            if("destination-address" in policy):
                print("destination-address:", policy['destination-address'])
            if("destination-mask" in policy):
                print("destination-mask:", policy['destination-mask'])
            if("protocol" in policy):
                print("protocol:", policy['protocol'])
            if("source-port" in policy):
                print("source-port:", policy['source-port'])
            if("destination-port" in policy):
                print("destination-port:", policy['destination-port'])
            print("\n")
            # pprint(policy)

    def set_status(self, json_instance):
        '''
        Set the status of the VNF starting from a
        json instance
        '''
        print("setting status...")
        json_instance = self.json_instance

        json_interfaces = json_instance[self.yang_module_name+':'+'interfaces']["ifEntry"]
        json_policies = json_instance[self.yang_module_name+':'+'firewall']["policies"]

        self.set_interfaces(json_interfaces)

        self.set_policies(json_policies)

        print("setting status...done!")

    def set_interfaces(self, json_interfaces):

        print("\n")
        for interface in json_interfaces:
            # Set interface
            # logging.debug(interface)

            print("Setting interface: name:", interface['name'], ", configurationType:", interface['configurationType'], ", type:", interface['type'], "...")

            if 'default_gw' not in interface:
                default_gw = None
            else:
                default_gw = interface['default_gw']
            if 'address' not in interface:
                address = None
            else:
                address = interface['address']
            if 'netmask' not in interface:
                netmask = '24'
            else:
                netmask = interface['netmask']

            new_interface = Interface(name=interface['name'],
                                      ipv4_address=address,
                                      netmask=netmask,
                                      _type=interface['type'],
                                      configuration_type=interface['configurationType'],
                                      default_gw=default_gw)

            new_interface.set_interface()
            self.interfaces.append(new_interface)

            print("Setting interface: name:", interface['name'], ", configurationType:", interface['configurationType'], ", type:", interface['type'], "...done!\n")

    def set_policies(self, json_policies):

        # Filter: INPUT, OUTPUT, FORWARD
        # FORWARD because i want a transparent proxy
        filter_type = "INPUT"

        # Reset current iptables
        Bash('iptables -F')

        for policy in json_policies[::-1]:
            # Set policy
            # logging.debug(policy)

            if(policy['policy-name'] != "pol1" and policy['policy-name'] != "pol2"):
                rule = iptc.Rule()
                if('in-interface' in policy):
                    rule.in_interface = policy['in-interface']['name']
                if('out-interface' in policy):
                    rule.out_interface = policy['out-interface']['name']
                if('source-address' in policy and 'source-mask' in policy):
                    rule.src = policy['source-address']+'/'+policy['source-mask']
                if('destination-address' in policy and 'destination-mask' in policy):
                    rule.src = policy['destination-address'] + '/' + policy['destination-mask']
                if('protocol' in policy):
                    if(policy['protocol']!="all"):
                        rule.protocol = policy['protocol']
                        match = rule.create_match(policy['protocol'])

                if('source-port' in policy):
                    match.sport = policy['source-port']
                if('destination-port' in policy):
                    match.dport = policy['destination-port']
                '''
                if('description' in policy):
                    match.comment = "\"%s\"" % (policy['description'])
                '''

                rule.target = iptc.Target(rule, policy['action'].upper())

                chain = iptc.Chain(iptc.Table(iptc.Table.FILTER), filter_type)
                chain.insert_rule(rule)

    def print_policies(self):
        table = iptc.Table(iptc.Table.FILTER)
        for chain in table.chains:
            print("=======================")
            print("Chain ", chain.name)
            for rule in chain.rules:
                print("Rule", "proto:", rule.protocol, "src:", rule.src, "dst:", rule.dst, "in:", rule.in_interface, "out:", rule.out_interface)
                print("Matches: ")
                for match in rule.matches:
                    s_port = "any" if (match.sport is None) else match.sport
                    d_port = "any" if (match.dport is None) else match.dport
                    print(match.name, "\tspt:", s_port, "\tdpt:", d_port, "\tTarget:", rule.target.name)
            print("=======================")

    def get_policies_dict(self):
        table = iptc.Table(iptc.Table.FILTER)
        self.policies = []
        for chain in table.chains:
            for rule in chain.rules:
                policy_dict = self.get_policy_dict(rule)
                self.policies.append(policy_dict)

    def get_policy_dict(self, rule):
        dict = {}
        if (rule.in_interface is not None):
            dict['in-interface'] = rule.in_interface
        if (rule.out_interface is not None):
            dict['out-interface'] = rule.out_interface
        if (rule.src != "0.0.0.0/0.0.0.0"):
            tmp = rule.src.split('/')
            dict['source-address'] = tmp[0]
            dict['source-mask'] = tmp[1]
        if (rule.dst != "0.0.0.0/0.0.0.0"):
            tmp = rule.dst.split('/')
            dict['destination-address'] = tmp[0]
            dict['destination-mask'] = tmp[1]
            # rule.protocol returns "ip" instead of "all"
        if (rule.protocol != "ip"):
            dict['protocol'] = rule.protocol
        dict['action'] = rule.target.name
        for match in rule.matches:
            if match.sport is not None:
                dict['source-port'] = match.sport
            if match.dport is not None:
                dict['destination-port'] = match.dport
            '''
            if match.comment is not None:
                dict['description'] = match.comment
            '''
        return dict;

    def get_interfaces(self):
        '''
        Retrieve the interfaces of the VM
        '''
        vm_interfaces = []
        interfaces = netifaces.interfaces()
        for interface in interfaces:
            if interface == 'lo':
                continue
            default_gw = ''
            configuration_type = None
            gws = netifaces.gateways()
            if gws['default'] != {} and gws['default'][netifaces.AF_INET][1] == interface:
                default_gw = gws['default'][netifaces.AF_INET][0]
            interface_af_link_info = netifaces.ifaddresses(interface)[17]
            if 2 in netifaces.ifaddresses(interface):
                interface_af_inet_info = netifaces.ifaddresses(interface)[2]
                ipv4_address = interface_af_inet_info[0]['addr']
                netmask = interface_af_inet_info[0]['netmask']
            else:
                ipv4_address = ""
                netmask = ""
            if interface == constants.configuration_interface:
                _type = 'config'
                configuration_type = 'dhcp'
            else:
                _type = 'not_defined'

            vm_interfaces.append(Interface(name=interface, status=None,
                                             mac_address=interface_af_link_info[0]['addr'],
                                             ipv4_address=ipv4_address,
                                             netmask=netmask,
                                             default_gw=default_gw,
                                             _type=_type,
                                             configuration_type=configuration_type))
            return vm_interfaces

    def get_interfaces_dict(self):
        '''
        Get a python dictionary with the interfaces
        of the VNF
        '''
        self.interfaces = []
        for interface in self.get_interfaces():
            interface_dict = self.get_interface_dict(interface)
            self.interfaces.append(interface_dict)

    def get_interface_dict(self, interface):
        dict = {}
        dict['name'] = interface.name
        if interface.configuration_type is not None:
            dict['configurationType'] = interface.configuration_type
        else:
            dict['configurationType'] = 'not_defined'
        if interface.type is not None:
            dict['type'] = interface.type
        else:
            dict['type'] = 'not_defined'
        if interface.ipv4_address is not None and interface.ipv4_address != "":
            dict['address'] = interface.ipv4_address
        if interface.netmask is not None and interface.netmask != "":
            dict['netmask'] = interface.netmask
        if interface.default_gw is not None and interface.ipv4_address != "":
            dict['default_gw'] = interface.default_gw
        return dict

    def print_interface_dict(self, interface_dict):
        if ("name" in interface_dict):
            print("name:", interface_dict['name'])
        if ("configurationType" in interface_dict):
            print("configurationType:", interface_dict['configurationType'])
        if ("type" in interface_dict):
            print("type:", interface_dict['type'])
        if ("address" in interface_dict):
            print("address:", interface_dict['address'])
        if ("netmask" in interface_dict):
            print("netmask:", interface_dict['netmask'])
        if ("default_gw" in interface_dict):
            print("default_gw:", interface_dict['default_gw'])
        print("\n")

    def print_new_json(self):

        print("NEW JSON:\n")

        print("Interfaces\n")
        for interface in self.interfaces:
            print("name:", interface['name'])
            print("configurationType:", interface['configurationType'])
            print("type:", interface['type'])
            if ("address" in interface):
                print("address: ", interface['address'])
            if ("netmask" in interface):
                print("netmask: ", interface['netmask'])
            if ("default-gw" in interface):
                print("default-gw: ", interface['default-gw'])
            print("\n")
            # pprint(interface)

        print("Policies\n")
        for policy in self.policies:
            if("description" in policy):
                print("description:", policy['description'])
            print("action:", policy['action'])
            if ("in-interface" in policy):
                print("in-interface:", policy['in-interface'])
            if ("out-interface" in policy):
                print("out-interface:", policy['out-interface'])
            if ("source-address" in policy):
                print("source-address:", policy['source-address'])
            if ("source-mask" in policy):
                print("source-mask:", policy['source-mask'])
            if ("destination-address" in policy):
                print("destination-address:", policy['destination-address'])
            if ("destination-mask" in policy):
                print("destination-mask:", policy['destination-mask'])
            if ("protocol" in policy):
                print("protocol:", policy['protocol'])
            if ("source-port" in policy):
                print("source-port:", policy['source-port'])
            if ("destination-port" in policy):
                print("destination-port:", policy['destination-port'])
            print("\n")


fw = Firewall()

json_file = 'firewall/configuration_firewall_example.json'

fw.json_parse(json_file)
fw.json_print()
fw.set_status("test")
fw.get_interfaces_dict()
fw.get_policies_dict()
#fw.print_policies()
fw.print_new_json()


